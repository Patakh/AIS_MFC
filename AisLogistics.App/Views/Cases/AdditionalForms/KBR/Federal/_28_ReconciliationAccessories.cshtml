@model _28_ReconciliationAccessoriesModel
@{
    IEnumerable<SelectListItem> applicantAttribute = new List<SelectListItem>
    {
        new ("организация", "1"),
        new ("физическое лицо, не являющееся индивидуальным предпринимателем", "2"),
        new ("физическое лицо, зарегистрированное в качестве индивидуального предпринимателя", "3"),
    };

    IEnumerable<SelectListItem> certificate = new List<SelectListItem>
    {
        new ("по всем КБК", "1"),
        new ("по перечню КБК", "2"),
    };

    IEnumerable<SelectListItem> certificateDeviliry = new List<SelectListItem>
    {
        new ("в налоговом органе , в который представлено настоящее заявление", "1"),
        new ("в многофункциональном центре предоставления государственных и муниципальных услуг (далее - МФЦ), через который представлено настоящее заявление, для чего выражаю согласие на передачу мне справки на бумажном носителе через МФЦ", "2"),
        new ("по почте по имеющемуся у налогового органа адресу заявителя", "3"),
    };
}

<style>
    .form-check {
        margin-left: 10px;
    }

    .modal .form-check-input[type=radio] {
        margin-right: 10px;
    }
</style>

<div id="additional-data-content">
    <div class="row g-3">
        <div class="col-sm-8 mx-auto">
            <div class="row mb-3">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="CodeFNS">Налоговый орган</label>
                    <select class="form-select select2-search required" asp-for="CodeFNS"
                            data-fns-dictionary='{"dictionary" : "null", "default_value":"@(Model.CodeFNS  == null || string.IsNullOrEmpty(Model.CodeFNS) ?  "" : Model.CodeFNS)"}'>
                    </select>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12">
                    <label class="form-label" asp-for="ApplicantAttribute">Признак заявителя</label>
                    <select asp-items="@applicantAttribute" class="form-select select2-nosearch" asp-for="ApplicantAttribute"></select>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Certificate">
                        предоставить акт сверки принадлежности сумм денежных средств, перечисленных и (или) признаваемых в качестве единого
                        налогового платежа, либо сумм денежных средств, перечисленных не в качестве единого налогового платежа
                    </label>
                    <select asp-items="@certificate" class="form-select select2-nosearch" asp-for="Certificate"></select>
                </div>
                <div class="col-sm-4">
                    <label class="form-label" asp-for="BeginDate">С</label>
                    <div class="input-group input-group-merge">
                        <span class="input-group-text">
                            <i class="bi bi-calendar3"></i>
                        </span>
                        <input asp-for="BeginDate" type="text" class="form-control pickdate">
                    </div>
                </div>
                <div class="col-sm-4">
                    <label class="form-label" asp-for="EndDate">по</label>
                    <div class="input-group input-group-merge">
                        <span class="input-group-text">
                            <i class="bi bi-calendar3"></i>
                        </span>
                        <input asp-for="EndDate" type="text" class="form-control pickdate">
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="CertificateDeviliry">Способ выдачи справки</label>
                    <select asp-items="@certificateDeviliry" class="form-select select2-nosearch" asp-for="CertificateDeviliry"></select>
                </div>
            </div>
            <br />
            <h5 class="my-2">Перечень КБК</h5>
            <div id="appliedDocumentList" data-clone-list>
                @for (var i = 0; i < Model.AppliedDocumentList.Length; i++)
                {
                    <div class="g-3" id="clone@(i)" data-id="@i" data-clone>
                        <hr />
                        <div class="row mb-1 align-items-center">
                            <div class="col-11">
                                <label class="form-label title" asp-for="AppliedDocumentList[i].Code">КБК @(i + 1)</label>
                                <input type="text" list="Docs" asp-for="AppliedDocumentList[i].Code" class="form-control">
                            </div>
                            <div class="col-1 mt-4">
                                <button type="button" class="btn btn-danger" onclick="blockRemove(this)"><i class="bi bi-trash"></i></button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="row justify-content-center">
                <div class="col-2">
                    <button type="button" class="btn btn-primary" id="addAppliedDocument"><i class="bi bi-plus"></i></button>
                </div>
            </div>
            <hr />
        </div>
    </div>
</div>
<div id="originalBlock">
    <div class="g-3" id="appliedDocument" data-id="" data-original>
        <hr />
        <div class="row mb-1 align-items-center">
            <div class="col-11">
                <label class="form-label title" asp-for="AppliedDocumentList[0].Code">КБК 0</label>
                <input type="text" list="Docs" asp-for="AppliedDocumentList[0].Code" class="form-control">
            </div>
            <div class="col-1 mt-4">
                <button type="button" class="btn btn-danger" onclick="blockRemove(this)"><i class="bi bi-trash"></i></button>
            </div>
        </div>
    </div>
</div>

<script>
    var additionalForm = $('#additional-data-content');
    var originalBlock = $('#originalBlock');
    var regionCode = @Json.Serialize(Options.Value.Region);
    $(function () {

        additionalForm.find("select.select2-nosearch").each(function () {
            $(this).select2({
                //dropdownParent: $("#mainModal"), для select модального окна
                minimumResultsForSearch: Infinity
            });
        });

        originalBlock.find('[data-original]').each(function (_, item) {
            renameBlock($(item), 100, true);
            visibilityBlock($(item), true, true);
        });
        additionalForm.find('#addAppliedDocument').on('click', () => addForm('appliedDocumentList', 'appliedDocument'));

        additionalForm.find("select.select2-search").each(function () {
            $(this).select2({
                //dropdownParent: $("#mainModal"),
            });
        });

        let options = { clearIncomplete: true, showMaskOnHover: false };

        additionalForm.find('[name^="Code"]').inputmask("9{20}", options);

        additionalForm.find(".pickdate").datepicker({
            language: "ru",
            autoclose: true
        }).inputmask("99.99.9999", options);
    });

    function addForm(cloneListId, originalId) { //Динамическое добавление Принимает (Куда Откуда)
        let $cloneList = additionalForm.find(`#${cloneListId}`);
        let $original = originalBlock.find(`#${originalId}`);
        let $cloneBlock = $original.clone(true);
        let indexId = $cloneList.find('[data-clone]').length;
        renameBlock($cloneBlock, indexId);
        blockInit($cloneBlock);
        $cloneList.append($cloneBlock);
    }

    function blockInit($block) {
        visibilityBlock($block, false, false);

        $block.find("input").each(function () {
            $(this).val("");
        });
        $block.find('select.select2-nosearch').each(function () {
            $(this).select2({
                minimumResultsForSearch: Infinity,
            })
        });
    }

    function renameBlock($cloneBlock, indexId, initOriginal = false) {

        if (!initOriginal) {
            $cloneBlock.find('.title').text($cloneBlock.find('.title').text().replace(/\d+/, indexId + 1));
            $cloneBlock.attr("id", `${$cloneBlock.attr("id")}${indexId}`);
            $cloneBlock.attr('data-id', indexId);
            $cloneBlock.attr('data-clone', '');
            $cloneBlock.removeAttr('data-original');
        }

        $cloneBlock.find('input, select, div').each(function () {
            $(this).attr('id', $(this).attr('id')?.replace(/\d+/, indexId));
            if ($(this).is('[name]')) {
                $(this).attr('name', $(this).attr('name').replace(/\d+/, indexId));
            }
        });

        $cloneBlock.find('label').each(function () {
            $(this).attr('for', $(this).attr('for').replace(/\d+/, indexId));
        });
    }

    function blockRemove(el) {
        let $cloneList = $(el).closest('[data-clone-list]');
        el.closest('[data-clone]').remove();
        $cloneList.find('[data-clone]').each(function (index, item) {
            renameBlock($(item), index);
        });
    }

    (function getDictionariesfns() {
        let dicts = new Set();
        $('[data-fns-dictionary]').each(function () {
            let $this = $(this);
            let options = $this.data('fns-dictionary');
            if (!dicts.has(options.dictionary)) {
                dicts.add(options.dictionary);
                $.post('/SmevFns/GetFnsDepartments', null,
                    function (dictionary) {
                        if (dictionary.error) return;
                        dictionary.sort((prev, next) => {
                            if (next.code.startsWith(`${regionCode}`)) {
                                return 1;
                            } else return -1;
                        });

                        fillSelectFns(options.dictionary, dictionary);
                    });
            }
        });
    }());

    function fillSelectFns(dictName, dictionary) {
        $.each($(`[data-fns-dictionary*='"${dictName}"']`),
            function () {
                let $this = $(this);
                let items = dictionary;

                $this.empty();
                if (!$this.hasClass('required')) {
                    $this.append(new Option('Не выбрано', ''));
                }
                if ($this.is('[data-value-value]')) {
                    items.forEach(function (item) {
                        $this.append(new Option(item.name, item.name))
                    });
                } else {
                    items.forEach(function (item) {
                        $this.append(new Option(item.name, item.code))
                    });
                }

                if ($this.data('fns-dictionary').default_value) {
                    let defVal = $this.data('fns-dictionary').default_value;
                    if (defVal) {
                        $this.val(defVal).trigger('update');
                        $this.attr('data-def', defVal);
                    }
                } else {
                    $this.val('').trigger('update');
                }
            });
    }

    function visibilityBlock($block, hide, isDisabled, sliding = 0) {
        switch (hide) {
            case true:
                $block.slideUp(sliding);
                break;
            case false:
                $block.slideDown(sliding);
                break;
        }


        switch (isDisabled) {
            case true:
                $block.find('input, select').each(function () {
                    $(this).prop('disabled', true);
                });
                break;
            case false:
                $block.find('input, select').each(function () {
                    $(this).prop('disabled', false);
                });
                $block.find('[data-disabled]').each(function () {
                    visibilityBlock($(this), true, true);
                });
                break;
        }
    }

</script>