@model _41_7_PfrAppointMonthlyCashPaymentsModel

<div id="additional-data-content">
    <div class="row g-3">
        <div class="col-sm-8 mx-auto">
            <h5 class="my-2">Заявитель</h5>
            <div class="row mb-2">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Customer.Citizenship">Гражданство</label>
                    <select class="select2-search" asp-for="Customer.Citizenship" data-value-value
                            data-dictionary='{"dictionary":"Oksm", "default_value":"@(string.IsNullOrEmpty(Model.Customer.Citizenship) ?  "Россия" : Model.Customer.Citizenship)"}'>
                    </select>
                </div>
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Customer.LastNameBirth">Фамилия, которая была при рождении</label>
                    <input type="text" asp-for="Customer.LastNameBirth" class="form-control">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Customer.StayAddress">Адрес места пребывания</label>
                    <input type="text" asp-for="Customer.StayAddress" class="form-control">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Customer.ActualResidenceAddress">Адрес фактического проживания</label>
                    <input type="text" asp-for="Customer.ActualResidenceAddress" class="form-control">
                </div>
            </div>
            <hr />
            <h5 class="my-2">Представитель</h5>
            <div class="row mb-3">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Representative.StayAddress">Адрес места пребывания </label>
                    <input type="text" asp-for="Representative.StayAddress" class="form-control">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Representative.ActualResidenceAddress">Адрес фактического проживания</label>
                    <input type="text" asp-for="Representative.ActualResidenceAddress" class="form-control">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-12">
                    <label class="form-label" asp-for="Representative.OrganizationLocation">Место нахождения организации</label>
                    <input type="text" asp-for="Representative.OrganizationLocation" class="form-control">
                </div>
            </div>
            <br />
            <h5 class="my-2">Выплата</h5>
            <div class="row mb-3">
                <div class="col-sm-9">
                    <label class="form-label" asp-for="TypePayCategory">вид выплаты</label>
                    <input type="text" asp-for="TypePayCategory" class="form-control">
                </div>
                <div class="col-sm-3">
                    <label class="form-label" asp-for="PayDate">с 1 го</label>
                    <div class="input-group input-group-merge">
                        <span class="input-group-text"><i class="bi bi-calendar3"></i></span>
                        <input type="text" asp-for="PayDate" class="form-control pickdate-short">
                    </div>
                </div>
            </div> 
            <div class="row mb-3">
                <div class="col-sm-12 mt-2" checkBlock>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="PayOrganizationType1" name="PayOrganizationType" value="1" checked="@(Model.PayOrganizationType == "1")">
                        <label class="form-check-label" for="PayOrganizationType1">через организацию почтовой связи</label>
                    </div>
                    <div class="ms-3 ps-4" checkBlockBody>
                        <div class="col-sm-12">
                            <label class="form-label" asp-for="OrganizationAdress">указывается адрес, по которому должна доставляться выплата</label>
                            <input type="text" asp-for="OrganizationAdress" class="form-control">
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 mt-2" checkBlock>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="PayOrganizationType2" name="PayOrganizationType" value="2" checked="@(Model.PayOrganizationType == "2")">
                        <label class="form-check-label" for="PayOrganizationType2">через кредитную организацию</label>
                    </div>
                    <div class="ms-3 ps-4" checkBlockBody>
                        <div class="col-sm-12">
                            <label class="form-label" asp-for="OrganizationName">указывается полное наименование кредитной организации</label>
                            <input type="text" asp-for="OrganizationName" class="form-control">
                        </div>
                        <div class="col-sm-12">
                            <label class="form-label" asp-for="OrganizationRekvisits">указывается номер счета получателя</label>
                            <input type="text" asp-for="OrganizationRekvisits" class="form-control">
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 mt-2" checkBlock>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="PayOrganizationType3" name="PayOrganizationType" value="3" checked="@(Model.PayOrganizationType == "3")">
                        <label class="form-check-label" for="PayOrganizationType3">через иную организацию</label>
                    </div>
                    <div class="ms-3 ps-4" checkBlockBody>
                        <div class="col-sm-12">
                            <label class="form-label" asp-for="OrganizationName">указывается полное наименование иной организации</label>
                            <input type="text" asp-for="OrganizationName" class="form-control">
                        </div> 
                        <div class="col-sm-12">
                            <label class="form-label" asp-for="OrganizationAdress">указывается адрес, по которому должна доставляться выплата</label>
                            <input type="text" asp-for="OrganizationAdress" class="form-control">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    var additionalForm = $('#additional-data-content');
    var applicant = {
        fio: $("#Customer_Fio"),
        docSeriesNumber: $("#Customer_DocSeriesNumber"),
        docType: $("#DocType"),
        docIssueDate: $("#DocIssueDate"),
        birthDate: $("#BirthDate"),
        birthPlace: $("#BirthAddress"),
        docIssuer: $("#DocIssuer"),
        residenceAddress: $("#ResidenceAddress"),
        residenceAddressp: $("#ResidenceAddressP")
    };

    $(function () {

        select2Init(additionalForm);
        let options = { clearIncomplete: true, showMaskOnHover: false };
        additionalForm.find(".pickdate").datepicker({
            language: "ru",
            autoclose: true,
        }).inputmask("99.99.9999", options);

        additionalForm.find(".pickdate-short").datepicker({
            format: "mm.yyyy",
            startView: "months",
            minViewMode: "months",
            language: "ru",
            autoclose: true
        }).inputmask("99.9999", options);

        (function getDictionaries() {
            let dicts = new Set();
            $('[data-dictionary]').each(function () {
                let $this = $(this);
                let options = $this.data('dictionary');
                if (!dicts.has(options.dictionary)) {
                    dicts.add(options.dictionary);
                    $.post(`/SmevBase/SmevGetDictionary`,
                        {
                            type: options.dictionary
                        },
                        function (dictionary) {
                            if (dictionary.error) return;
                            fillSelect(options.dictionary, dictionary);
                        });
                }
            });
        }());

        function fillSelect(dictName, dictionary) {
            $.each($(`[data-dictionary*='"${dictName}"']`),
                function () {
                    let $this = $(this);
                    let items = dictionary;
                    $this.empty();
                    if (!$this.hasClass('required')) {
                        $this.append(new Option('Не выбрано', ''));
                    }
                    if ($this.is('[data-value-value]')) {
                        items.dictionary.forEach(function (item) {
                            $this.append(new Option(item.value, item.value));
                        });
                    } else {
                        items.dictionary.forEach(function (item) {
                            $this.append(new Option(item.value, item.key));
                        });
                    }

                    if ($this.data('dictionary').default_value) {
                        let defVal = $this.data('dictionary').default_value;
                        if (defVal) {
                            $this.val(defVal).trigger('update');
                            $this.attr('data-def', defVal);
                        }
                    } else {
                        $this.val('').trigger('update');
                    }
                });
        }

        toggleFields();
    });

    additionalForm.find('[type="radio"], input[type="checkbox"]').on('click', function () {
        toggleFields();
    });

    function toggleFields() {
        additionalForm.find('[checkBlock] input[type="radio"], [checkBlock] input[type="checkbox"]').each(function () {
            let $block = $(this).closest('[checkBlock]');

            if ($(this).is(':checked')) {
                visibilityBlock($block.find('[checkBlockBody]'), false, false);
            } else {
                visibilityBlock($block.find('[checkBlockBody]'), true, true);
            }
        })
    }

    function select2Init($block) {
        $block.find("select.select2-nosearch").each(function () {
            $(this).select2({
                minimumResultsForSearch: Infinity
            });
        });

        $block.find("select.select2-search").each(function () {
            $(this).select2({
            });
        });
    }


    function visibilityBlock($block, hide, isDisabled) {
        switch (hide) {
            case true:
                $block.hide();
                break;
            case false:
                $block.show();
                break;
        }

        switch (isDisabled) {
            case true:
                $block.find('input, select').each(function () {
                    $(this).prop('disabled', true);
                });
                break;
            case false:
                $block.find('input, select').each(function () {
                    $(this).prop('disabled', false);
                });
                $block.find('[data-disabled]').each(function () {
                    visibilityBlock($(this), true, true);
                });
                break;
        }
    }
</script>
